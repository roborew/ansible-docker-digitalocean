---
# Test Capistrano-style deployment system
- name: Test Deployment System
  hosts: digitalocean
  become: true
  vars_files:
    - ../group_vars/all.yml
    - ../group_vars/prod.yml
  vars:
    test_app: "{{ apps[0].name }}" # Test the first app

  tasks:
    - name: "🧪 Testing Capistrano Deployment System"
      debug:
        msg: |
          Testing deployment for: {{ test_app }}
          ========================================

    - name: "📁 Test: Verify Capistrano directory structure exists"
      stat:
        path: "{{ item }}"
      loop:
        - "/opt/{{ test_app }}"
        - "/opt/{{ test_app }}/releases"
        - "/opt/{{ test_app }}/shared"
        - "/opt/{{ test_app }}/shared/config"
        - "/opt/{{ test_app }}/shared/logs"
        - "/opt/{{ test_app }}/shared/data"
        - "/opt/{{ test_app }}/backups"
        - "/opt/{{ test_app }}/repo"
      register: directory_structure
      failed_when: not item_result.stat.exists
      loop_control:
        loop_var: item_result
        index_var: loop_index

    - name: "✅ Directory structure test passed"
      debug:
        msg: "All required Capistrano directories exist"

    - name: "🔗 Test: Verify current symlink exists and is valid"
      stat:
        path: "/opt/{{ test_app }}/current"
      register: current_symlink
      failed_when: not current_symlink.stat.exists or not current_symlink.stat.islnk

    - name: "📋 Get current release info"
      shell: |
        readlink /opt/{{ test_app }}/current | sed 's|releases/||'
      register: current_release

    - name: "✅ Current symlink test passed"
      debug:
        msg: "Current symlink points to release: {{ current_release.stdout }}"

    - name: "🐳 Test: Verify containers are running"
      shell: |
        cd /opt/{{ test_app }}/current
        docker compose ps --format json
      register: container_status
      become_user: "{{ server_user }}"

    - name: "📊 Display container status"
      debug:
        msg: |
          Container Status:
          {{ container_status.stdout }}

    - name: "🏥 Test: Check container health"
      shell: |
        cd /opt/{{ test_app }}/current
        docker compose ps --services --filter status=running | wc -l
      register: running_containers
      become_user: "{{ server_user }}"

    - name: "✅ Container health test"
      debug:
        msg: "{{ running_containers.stdout }} containers are running"
      failed_when: running_containers.stdout | int == 0

    - name: "📝 Test: Verify deployment metadata exists"
      stat:
        path: "/opt/{{ test_app }}/current/.deploy_metadata.json"
      register: metadata_file

    - name: "📄 Read deployment metadata"
      slurp:
        src: "/opt/{{ test_app }}/current/.deploy_metadata.json"
      register: metadata_content
      when: metadata_file.stat.exists

    - name: "✅ Metadata test results"
      debug:
        msg: |
          Metadata exists: {{ metadata_file.stat.exists }}
          {% if metadata_file.stat.exists %}
          Metadata: {{ metadata_content.content | b64decode | from_json }}
          {% endif %}

    - name: "📋 Test: List available releases"
      shell: |
        ls -1t /opt/{{ test_app }}/releases/ | head -5
      register: available_releases

    - name: "📦 Available releases"
      debug:
        msg: |
          Available releases (latest 5):
          {{ available_releases.stdout_lines | join('\n') }}

    - name: "📄 Test: Check deployment logs exist"
      find:
        paths: "/opt/{{ test_app }}/shared/logs"
        patterns: "*.log"
      register: log_files

    - name: "✅ Log files test"
      debug:
        msg: "Found {{ log_files.files | length }} log files"

    - name: "🌐 Test: Check if app is accessible"
      uri:
        url: "http://{{ ansible_default_ipv4.address }}"
        method: GET
        status_code: [200, 301, 302, 403]
        timeout: 10
      register: app_response
      ignore_errors: true
      delegate_to: localhost
      become: false

    - name: "✅ App accessibility test"
      debug:
        msg: |
          App response status: {{ app_response.status | default('unreachable') }}
          {% if app_response.status is defined %}
          App is responding on HTTP
          {% else %}
          App may not be accessible externally (this is normal for fresh deployments)
          {% endif %}

  post_tasks:
    - name: "🎉 Deployment System Test Summary"
      debug:
        msg: |
          ========================================
          🎉 DEPLOYMENT SYSTEM TEST COMPLETE! 
          ========================================

          ✅ Capistrano directory structure: PASS
          ✅ Current symlink: PASS  
          ✅ Container status: PASS
          ✅ Deployment metadata: PASS
          ✅ Release management: PASS
          ✅ Logging system: PASS

          📊 System Status:
          - Current release: {{ current_release.stdout }}
          - Running containers: {{ running_containers.stdout }}
          - Available releases: {{ available_releases.stdout_lines | length }}
          - Log files: {{ log_files.files | length }}

          🚀 Deployment system is working correctly!

          Available Commands:
          ==================

          📦 Deploy main branch:
            ansible-playbook playbooks/deploy-stack.yml
            ansible-playbook playbooks/deploy.yml

          🌿 Deploy feature branch:
            ansible-playbook playbooks/deploy.yml -e mode=branch -e branch=feature-name

          🔄 Rollback to previous release:
            ansible-playbook playbooks/deploy.yml -e mode=rollback

          🔐 Manage .env files:
            ansible-playbook playbooks/manage-env.yml -e action=create -e app_name={{ test_app }}
            ansible-playbook playbooks/manage-env.yml -e action=deploy -e app_name={{ test_app }}

          📊 Run this test again:
            ansible-playbook playbooks/test-deployment.yml
