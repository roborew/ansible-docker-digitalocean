---
- name: Provision DigitalOcean Droplet
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - ../group_vars/all.yml
  vars_prompt:
    - name: droplet_name
      prompt: "Enter droplet name"
      private: false
      default: "ansible-droplet"

    - name: droplet_count
      prompt: "Number of droplets to create"
      private: false
      default: "1"

  tasks:
    - name: Check if SSH keys are names (not numeric IDs)
      set_fact:
        keys_are_names: "{{ (do_ssh_keys[0] | regex_search('^[0-9]+$')) is none }}"

    - name: Convert SSH key names to IDs
      shell: "{{ playbook_dir }}/../scripts/get-ssh-key-ids.sh '{{ do_ssh_keys | join(',') }}'"
      register: ssh_key_lookup
      environment:
        DO_API_TOKEN: "{{ do_token }}"
      when: keys_are_names
      check_mode: false

    - name: Extract SSH key IDs from lookup output
      set_fact:
        ssh_key_ids: "{{ ssh_key_lookup.stdout | regex_search('DO_SSH_KEYS=(.+)', '\\1') | first | split(',') }}"
      when: keys_are_names and ssh_key_lookup is defined and ssh_key_lookup.rc == 0 and 'DO_SSH_KEYS=' in ssh_key_lookup.stdout

    - name: Use provided SSH key IDs if they're already numbers
      set_fact:
        ssh_key_ids: "{{ do_ssh_keys }}"
      when: not keys_are_names

    - name: Display SSH keys being used
      debug:
        msg: "Using SSH key IDs: {{ ssh_key_ids }}"

    - name: Create DigitalOcean droplet
      community.digitalocean.digital_ocean_droplet:
        state: present
        name: "{{ droplet_name }}-{{ item }}"
        api_token: "{{ do_token }}"
        size: "{{ do_size }}"
        region: "{{ do_region }}"
        image: "{{ do_image }}"
        ssh_keys: "{{ ssh_key_ids }}"
        monitoring: "{{ do_monitoring }}"
        wait_timeout: 600
        unique_name: true
      register: droplet_result
      loop: "{{ range(1, droplet_count|int + 1) | list }}"

    - name: Display droplet information
      debug:
        msg: |
          Droplet created successfully!
          Name: {{ item.data.droplet.name }}
          IP: {{ item.data.droplet.networks.v4[0].ip_address }}
          ID: {{ item.data.droplet.id }}
      loop: "{{ droplet_result.results }}"
      when: item.changed and item.data is defined

    - name: Wait for SSH to become available
      wait_for:
        host: "{{ item.data.droplet.networks.v4[0].ip_address }}"
        port: 22
        delay: 30
        timeout: 300
      loop: "{{ droplet_result.results }}"
      when: item.changed and item.data is defined

    - name: Add droplet to inventory
      add_host:
        name: "{{ item.data.droplet.name }}"
        ansible_host: "{{ item.data.droplet.networks.v4[0].ip_address }}"
        ansible_user: root
        groups: digitalocean
      loop: "{{ droplet_result.results }}"
      when: item.changed and item.data is defined
      register: added_hosts

    - name: Update Ansible inventory with new droplets
      shell: "{{ playbook_dir }}/../scripts/update-inventory.sh --only-new"
      environment:
        DO_API_TOKEN: "{{ do_token }}"
        SERVER_USERNAME: "{{ lookup('env', 'SERVER_USERNAME') }}"
      when: added_hosts is defined and added_hosts.results | selectattr('changed') | list | length > 0
      delegate_to: localhost
      args:
        chdir: "{{ playbook_dir }}/.."
      register: inventory_update

    - name: Display next steps
      debug:
        msg: |
          ðŸŽ‰ Provisioning Complete!

          Droplets Created:
          {% for result in droplet_result.results %}
          {% if result.changed and result.data is defined %}
          - {{ result.data.droplet.name }}: {{ result.data.droplet.networks.v4[0].ip_address }}
          {% endif %}
          {% endfor %}

          Next Steps:
          1. Configure servers: ansible-playbook playbooks/configure-server.yml
          2. Deploy applications: ansible-playbook playbooks/deploy-stack.yml
          3. Check inventory: ansible-vault view inventory/hosts.yml
      when: droplet_result.results | selectattr('changed') | selectattr('data', 'defined') | list | length > 0
