#!/bin/bash

# Script to update Ansible inventory with current DigitalOcean droplets

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

INVENTORY_FILE="inventory/hosts.yml"
BACKUP_FILE="inventory/hosts.yml.backup.$(date +%Y%m%d_%H%M%S)"
ONLY_NEW=false
ENCRYPT=true

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --only-new)
            ONLY_NEW=true
            shift
            ;;
        --no-encrypt)
            ENCRYPT=false
            shift
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}üîÑ Updating Ansible Inventory${NC}"
echo "=================================="

# Check if DO_API_TOKEN is set
if [ -z "$DO_API_TOKEN" ]; then
    echo -e "${RED}Error: DO_API_TOKEN not set${NC}"
    echo "Run: source scripts/prepare.sh"
    exit 1
fi

# Ensure inventory directory exists
mkdir -p "inventory"

# Create inventory file from template if it doesn't exist
if [ ! -f "$INVENTORY_FILE" ] && [ -f "inventory/hosts.yml.example" ]; then
    echo -e "${YELLOW}üìÑ Creating inventory file from template...${NC}"
    cp "inventory/hosts.yml.example" "$INVENTORY_FILE"
fi

# Backup current inventory
if [ -f "$INVENTORY_FILE" ]; then
    cp "$INVENTORY_FILE" "$BACKUP_FILE"
    echo -e "${YELLOW}üìÑ Backed up inventory to: $BACKUP_FILE${NC}"
fi

# Get server username from all.yml
if [ -f "group_vars/all.yml" ]; then
    # Extract ONLY the server_user value, being very specific about the pattern
    SERVER_USER=$(grep -E '^[[:space:]]*server_user:[[:space:]]*["]?[^"]*["]?$' group_vars/all.yml | sed -E 's/^[[:space:]]*server_user:[[:space:]]*["]?([^"]*)["]?$/\1/')
    
    # Clean up any whitespace and Ansible variables
    SERVER_USER=$(echo "$SERVER_USER" | sed 's/{{.*}}//g' | xargs)
    
    if [ -z "$SERVER_USER" ] || [ "$SERVER_USER" = "None" ]; then
        echo -e "${RED}‚ùå Error: server_user not found in group_vars/all.yml${NC}"
        echo "Please ensure server_user is properly configured in group_vars/all.yml"
        exit 1
    else
        echo -e "${GREEN}‚úÖ Using server user from all.yml: $SERVER_USER${NC}"
    fi
else
    echo -e "${RED}‚ùå Error: group_vars/all.yml not found${NC}"
    echo "Please ensure group_vars/all.yml exists and contains server_user configuration"
    exit 1
fi

# Get droplets from DigitalOcean API
echo -e "${BLUE}üåê Fetching droplets from DigitalOcean...${NC}"
DROPLETS=$(curl -s -X GET \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DO_API_TOKEN" \
    "https://api.digitalocean.com/v2/droplets")

# Check if API call was successful
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Failed to fetch droplets from DigitalOcean API${NC}"
    exit 1
fi

# Parse droplets and create inventory
echo -e "${BLUE}üìù Generating inventory file...${NC}"

# Start with the inventory header
cat > "$INVENTORY_FILE" << EOF
# Ansible Inventory - Auto-generated
# Last updated: $(date)
# 
# This file is automatically generated by scripts/update-inventory.sh
# Manual changes will be overwritten
# 
# WARNING: This file contains sensitive information and should be encrypted
# Use: ansible-vault encrypt inventory/hosts.yml

all:
  children:
    digitalocean:
      hosts:
EOF

if [ "$ONLY_NEW" = true ]; then
    # Calculate timestamp 5 minutes ago in a portable way
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS (BSD) date
        FIVE_MINS_AGO=$(date -v-5M -u +"%Y-%m-%dT%H:%M:%SZ")
    elif command -v gdate >/dev/null 2>&1; then
        # If GNU date is installed as gdate (common on macOS via brew)
        FIVE_MINS_AGO=$(gdate -d "5 minutes ago" -u +"%Y-%m-%dT%H:%M:%SZ")
    else
        # Linux (GNU) date
        FIVE_MINS_AGO=$(date -d "5 minutes ago" -u +"%Y-%m-%dT%H:%M:%SZ")
    fi

    # Use a simpler Python script that doesn't require yaml
    echo "$DROPLETS" | python3 -c "
import json
import sys
from datetime import datetime

try:
    data = json.load(sys.stdin)
    droplets = data.get('droplets', [])
    
    if not droplets:
        print('        # No droplets found')
        sys.exit(0)
    
    for droplet in droplets:
        created_at = datetime.strptime(droplet['created_at'], '%Y-%m-%dT%H:%M:%SZ')
        five_mins_ago = datetime.strptime('$FIVE_MINS_AGO', '%Y-%m-%dT%H:%M:%SZ')
        
        if created_at >= five_mins_ago:
            name = droplet['name']
            # Get public IP
            public_ip = None
            for network in droplet.get('networks', {}).get('v4', []):
                if network['type'] == 'public':
                    public_ip = network['ip_address']
                    break
            
            if public_ip:
                print(f'        {name}:')
                print(f'          ansible_host: {public_ip}')
                print(f'          ansible_user: \"$SERVER_USER\"')
                print(f'          droplet_id: {droplet[\"id\"]}')
                print(f'          droplet_region: {droplet[\"region\"][\"slug\"]}')
                print(f'          droplet_size: {droplet[\"size_slug\"]}')
                print(f'          droplet_status: {droplet[\"status\"]}')
                print(f'          # Created: {droplet[\"created_at\"]}')

except json.JSONDecodeError as e:
    print(f'# Error parsing JSON: {e}', file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print(f'# Error: {e}', file=sys.stderr)
    sys.exit(1)
" >> "$INVENTORY_FILE"
else
    # Add all droplets (original behavior)
    echo "$DROPLETS" | python3 -c "
import json
import sys

try:
    data = json.load(sys.stdin)
    droplets = data.get('droplets', [])
    
    if not droplets:
        print('        # No droplets found')
        sys.exit(0)
    
    for droplet in droplets:
        name = droplet['name']
        # Get public IP
        public_ip = None
        for network in droplet.get('networks', {}).get('v4', []):
            if network['type'] == 'public':
                public_ip = network['ip_address']
                break
        
        if public_ip:
            print(f'        {name}:')
            print(f'          ansible_host: {public_ip}')
            print(f'          ansible_user: \"$SERVER_USER\"')
            print(f'          droplet_id: {droplet[\"id\"]}')
            print(f'          droplet_region: {droplet[\"region\"][\"slug\"]}')
            print(f'          droplet_size: {droplet[\"size_slug\"]}')
            print(f'          droplet_status: {droplet[\"status\"]}')
            print(f'          # Created: {droplet[\"created_at\"]}')

except json.JSONDecodeError as e:
    print(f'# Error parsing JSON: {e}', file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print(f'# Error: {e}', file=sys.stderr)
    sys.exit(1)
" >> "$INVENTORY_FILE"
fi

# Add inventory footer
cat >> "$INVENTORY_FILE" << EOF
      vars:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        ansible_python_interpreter: /usr/bin/python3

    production:
      hosts:
        # Add production hosts here or use groups
      vars:
        ansible_user: "{{ server_user }}"

    staging:
      hosts:
        # Add staging hosts here
      vars:
        ansible_user: "{{ server_user }}"
EOF

# Replace the date placeholder
sed -i.tmp "s/\$(date)/$(date)/" "$INVENTORY_FILE" && rm "$INVENTORY_FILE.tmp"

# Encrypt the inventory file if requested
if [ "$ENCRYPT" = true ]; then
    echo -e "${BLUE}üîí Encrypting inventory file...${NC}"
    if command -v ansible-vault &> /dev/null; then
        ansible-vault encrypt "$INVENTORY_FILE"
        echo -e "${GREEN}‚úÖ Inventory encrypted with ansible-vault${NC}"
    else
        echo -e "${RED}‚ùå ansible-vault not found, skipping encryption${NC}"
        echo "   Install ansible-vault or run with --no-encrypt"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Inventory updated successfully${NC}"
echo -e "${BLUE}üìã Current droplets:${NC}"

# Display current inventory
ansible-inventory --list -y | grep -A 20 "digitalocean:" || echo "Run 'ansible-inventory --list' to see full inventory"

echo ""
echo -e "${GREEN}üéâ Inventory update complete!${NC}"
echo "File: $INVENTORY_FILE"
echo ""
echo "Next steps:"
echo "1. Review the inventory: ansible-vault view inventory/hosts.yml"
echo "2. Test connectivity: ansible digitalocean -m ping --ask-vault-pass"
echo "3. Deploy apps: ansible-playbook playbooks/deploy-stack.yml --ask-vault-pass" 