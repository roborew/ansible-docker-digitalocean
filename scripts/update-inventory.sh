#!/bin/bash

# Script to update Ansible inventory with current DigitalOcean droplets

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

INVENTORY_FILE="inventory/hosts.yml"
BACKUP_FILE="inventory/hosts.yml.backup.$(date +%Y%m%d_%H%M%S)"

echo -e "${BLUE}🔄 Updating Ansible Inventory${NC}"
echo "=================================="

# Check if DO_API_TOKEN is set
if [ -z "$DO_API_TOKEN" ]; then
    echo -e "${RED}Error: DO_API_TOKEN not set${NC}"
    echo "Run: source scripts/setup-env.sh"
    exit 1
fi

# Backup current inventory
if [ -f "$INVENTORY_FILE" ]; then
    cp "$INVENTORY_FILE" "$BACKUP_FILE"
    echo -e "${YELLOW}📄 Backed up inventory to: $BACKUP_FILE${NC}"
fi

# Get droplets from DigitalOcean API
echo -e "${BLUE}🌐 Fetching droplets from DigitalOcean...${NC}"
DROPLETS=$(curl -s -X GET \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DO_API_TOKEN" \
    "https://api.digitalocean.com/v2/droplets")

# Check if API call was successful
if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Failed to fetch droplets from DigitalOcean API${NC}"
    exit 1
fi

# Parse droplets and create inventory
echo -e "${BLUE}📝 Generating inventory file...${NC}"

cat > "$INVENTORY_FILE" << 'EOF'
# Ansible Inventory - Auto-generated
# Last updated: $(date)
# 
# This file is automatically generated by scripts/update-inventory.sh
# Manual changes will be overwritten

all:
  children:
    digitalocean:
      hosts:
EOF

# Extract droplet information and add to inventory
echo "$DROPLETS" | python3 -c "
import json
import sys

try:
    data = json.load(sys.stdin)
    droplets = data.get('droplets', [])
    
    if not droplets:
        print('        # No droplets found')
        sys.exit(0)
    
    for droplet in droplets:
        name = droplet['name']
        # Get public IP
        public_ip = None
        for network in droplet.get('networks', {}).get('v4', []):
            if network['type'] == 'public':
                public_ip = network['ip_address']
                break
        
        if public_ip:
            print(f'        {name}:')
            print(f'          ansible_host: {public_ip}')
            print(f'          ansible_user: root')
            print(f'          droplet_id: {droplet[\"id\"]}')
            print(f'          droplet_region: {droplet[\"region\"][\"slug\"]}')
            print(f'          droplet_size: {droplet[\"size_slug\"]}')
            print(f'          droplet_status: {droplet[\"status\"]}')
            print(f'          # Created: {droplet[\"created_at\"]}')

except json.JSONDecodeError as e:
    print(f'# Error parsing JSON: {e}', file=sys.stderr)
    sys.exit(1)
except Exception as e:
    print(f'# Error: {e}', file=sys.stderr)
    sys.exit(1)
" >> "$INVENTORY_FILE"

# Add inventory footer
cat >> "$INVENTORY_FILE" << 'EOF'
      vars:
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        ansible_python_interpreter: /usr/bin/python3

    production:
      hosts:
        # Add production hosts here or use groups
      vars:
        ansible_user: "{{ server_user | default('robodeploy') }}"

    staging:
      hosts:
        # Add staging hosts here
      vars:
        ansible_user: "{{ server_user | default('robodeploy') }}"
EOF

# Replace the date placeholder
sed -i.tmp "s/\$(date)/$(date)/" "$INVENTORY_FILE" && rm "$INVENTORY_FILE.tmp"

echo -e "${GREEN}✅ Inventory updated successfully${NC}"
echo -e "${BLUE}📋 Current droplets:${NC}"

# Display current inventory
ansible-inventory --list -y | grep -A 20 "digitalocean:" || echo "Run 'ansible-inventory --list' to see full inventory"

echo ""
echo -e "${GREEN}🎉 Inventory update complete!${NC}"
echo "File: $INVENTORY_FILE"
echo ""
echo "Next steps:"
echo "1. Review the inventory: cat $INVENTORY_FILE"
echo "2. Test connectivity: ansible digitalocean -m ping"
echo "3. Deploy apps: ansible-playbook playbooks/deploy-stack.yml" 