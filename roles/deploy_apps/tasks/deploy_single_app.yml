---
# Capistrano-style deployment for a single app
# Directory structure: /opt/app-name/{current, releases, shared, repo}

- name: "Set app variables for {{ current_app.name }}"
  set_fact:
    app_name: "{{ current_app.name }}"
    app_repo: "{{ current_app.repo }}"
    app_branch: "{{ current_app.branch | default('main') }}"
    app_base_dir: "{{ apps_base_dir }}/{{ current_app.name }}"
    app_hostname: "{{ current_app.hostname | default(current_app.name + '.' + ansible_default_ipv4.address + '.nip.io') }}"
    app_port: "{{ current_app.port | default('3000') }}"
    deploy_timestamp: "{{ ansible_date_time.epoch }}"
    release_dir: "{{ apps_base_dir }}/{{ current_app.name }}/releases/{{ ansible_date_time.epoch }}"

- name: "Display deployment info for {{ app_name }}"
  debug:
    msg: |
      🚀 Deploying {{ app_name }} (Capistrano-style):
      - Repository: {{ app_repo }}
      - Branch: {{ app_branch }}
      - Base Directory: {{ app_base_dir }}
      - Release: {{ deploy_timestamp }}
      - Hostname: {{ app_hostname }}
      - Port: {{ app_port }}

- name: "Create Capistrano directory structure for {{ app_name }}"
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ apps_user }}"
    group: "{{ apps_group }}"
    mode: "0755"
  loop:
    - "{{ app_base_dir }}"
    - "{{ app_base_dir }}/releases"
    - "{{ app_base_dir }}/shared"
    - "{{ app_base_dir }}/shared/config"
    - "{{ app_base_dir }}/shared/logs"
    - "{{ app_base_dir }}/shared/data"
    - "{{ app_base_dir }}/backups"

- name: "Clone repository to repo cache for {{ app_name }}"
  git:
    repo: "{{ app_repo }}"
    dest: "{{ app_base_dir }}/repo"
    version: "{{ app_branch }}"
    force: "{{ git_force_update | default(true) }}"
    accept_hostkey: "{{ git_accept_hostkey | default(true) }}"
  become: true
  become_user: "{{ apps_user }}"

- name: "Create new release directory for {{ app_name }}"
  file:
    path: "{{ release_dir }}"
    state: directory
    owner: "{{ apps_user }}"
    group: "{{ apps_group }}"
    mode: "0755"

- name: "Copy code to release directory for {{ app_name }}"
  synchronize:
    src: "{{ app_base_dir }}/repo/"
    dest: "{{ release_dir }}/"
    delete: true
    recursive: true
  delegate_to: "{{ inventory_hostname }}"
  become: true
  become_user: "{{ apps_user }}"

- name: "Check if .env.vault exists locally for {{ app_name }}"
  stat:
    path: "{{ playbook_dir }}/../env_files/{{ app_name }}.env.vault"
  register: local_env_vault_exists
  delegate_to: localhost
  become: false

- name: "Decrypt .env file locally for {{ app_name }}"
  shell: |
    cd {{ playbook_dir }}/..
    if [ -f "env_files/{{ app_name }}.env.vault" ]; then
      ansible-vault decrypt "env_files/{{ app_name }}.env.vault" --output="/tmp/{{ app_name }}.env.decrypted" --vault-password-file=.vault_pass
      echo "✅ .env file decrypted locally"
    else
      echo "⚠️  No .env.vault found locally, skipping decryption"
      exit 1
    fi
  delegate_to: localhost
  become: false
  register: local_env_decrypt_result
  when: local_env_vault_exists.stat.exists
  changed_when: false

- name: "Transfer decrypted .env file to server for {{ app_name }}"
  copy:
    src: "/tmp/{{ app_name }}.env.decrypted"
    dest: "{{ app_base_dir }}/shared/config/.env"
    owner: "{{ apps_user }}"
    group: "{{ apps_group }}"
    mode: "0600"
  become: true
  when: local_env_vault_exists.stat.exists

- name: "Clean up local temporary .env file for {{ app_name }}"
  file:
    path: "/tmp/{{ app_name }}.env.decrypted"
    state: absent
  delegate_to: localhost
  become: false
  when: local_env_vault_exists.stat.exists

- name: "Create symlinks to shared files for {{ app_name }}"
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
    force: true
  loop:
    - {
        src: "{{ app_base_dir }}/shared/config/.env",
        dest: "{{ release_dir }}/.env",
      }
    - { src: "{{ app_base_dir }}/shared/logs", dest: "{{ release_dir }}/logs" }
    - { src: "{{ app_base_dir }}/shared/data", dest: "{{ release_dir }}/data" }
  become: true
  become_user: "{{ apps_user }}"
  ignore_errors: true

- name: "Check if docker-compose.yml exists for {{ app_name }}"
  stat:
    path: "{{ release_dir }}/docker-compose.yml"
  register: compose_file

- name: "Check if compose.yml exists for {{ app_name }}"
  stat:
    path: "{{ release_dir }}/compose.yml"
  register: compose_file_alt
  when: not compose_file.stat.exists

- name: "Fail if no compose file found for {{ app_name }}"
  fail:
    msg: "No docker-compose.yml or compose.yml found in {{ release_dir }}"
  when: not compose_file.stat.exists and not compose_file_alt.stat.exists

- name: "Stop existing containers for {{ app_name }}"
  shell: |
    if [ -L "{{ app_base_dir }}/current" ] && [ -f "{{ app_base_dir }}/current/docker-compose.yml" -o -f "{{ app_base_dir }}/current/compose.yml" ]; then
      cd "{{ app_base_dir }}/current"
      {{ compose_command }} down || true
      echo "🛑 Stopped existing containers"
    else
      echo "ℹ️  No existing deployment to stop"
    fi
  become: true
  become_user: "{{ apps_user }}"
  register: stop_result

- name: "Check if app needs to be built from source"
  shell: "{{ compose_command }} config | grep -q 'build:'"
  args:
    chdir: "{{ release_dir }}"
  become: true
  become_user: "{{ apps_user }}"
  register: needs_build
  failed_when: false
  changed_when: false

- name: "Build {{ app_name }} with progress output"
  shell: |
    echo "🏗️  Building {{ app_name }} release {{ deploy_timestamp }}..."
    {{ compose_command }} build --progress=plain {{ '--no-cache' if force_rebuild | default(false) else '' }} 2>&1 | tee "{{ app_base_dir }}/shared/logs/build_{{ deploy_timestamp }}.log"
    build_exit_code=$?
    if [ $build_exit_code -eq 0 ]; then
      echo "✅ Build completed successfully"
    else
      echo "❌ Build failed with exit code $build_exit_code"
    fi
    exit $build_exit_code
  args:
    chdir: "{{ release_dir }}"
  become: true
  become_user: "{{ apps_user }}"
  environment:
    CADDY_HOSTNAME: "{{ app_hostname }}"
    CADDY_PORT: "{{ app_port }}"
    PROXY_NETWORK: "{{ proxy_network_name }}"
  register: build_result
  when: needs_build.rc == 0

- name: "Create current symlink (atomic deployment) for {{ app_name }}"
  shell: |
    # Atomic deployment using symlink swap
    cd "{{ app_base_dir }}"
    ln -sfn "releases/{{ deploy_timestamp }}" current_tmp
    mv current_tmp current
    echo "🔗 Current symlink updated to release {{ deploy_timestamp }}"
  become: true
  become_user: "{{ apps_user }}"

- name: "Start {{ app_name }} from current release"
  shell: |
    echo "🚀 Starting {{ app_name }} from current release..."
    cd "{{ app_base_dir }}/current"
    {{ compose_command }} up -d 2>&1 | tee "{{ app_base_dir }}/shared/logs/deploy_{{ deploy_timestamp }}.log"
    deploy_exit_code=$?
    if [ $deploy_exit_code -eq 0 ]; then
      echo "✅ Deployment completed successfully"
    else
      echo "❌ Deployment failed with exit code $deploy_exit_code"
    fi
    exit $deploy_exit_code
  become: true
  become_user: "{{ apps_user }}"
  environment:
    CADDY_HOSTNAME: "{{ app_hostname }}"
    CADDY_PORT: "{{ app_port }}"
    PROXY_NETWORK: "{{ proxy_network_name }}"
  register: deploy_result

- name: "Wait for {{ app_name }} containers to be ready"
  wait_for:
    timeout: 30
  delegate_to: localhost
  become: false

- name: "Verify {{ app_name }} containers are running"
  shell: |
    cd "{{ app_base_dir }}/current"
    echo "📊 Container Status for {{ app_name }}:"
    {{ compose_command }} ps
    echo ""
    echo "🏥 Health Check:"
    {{ compose_command }} logs --tail=10
  become: true
  become_user: "{{ apps_user }}"
  register: health_check
  changed_when: false

- name: "Clean up old releases for {{ app_name }}"
  shell: |
    cd "{{ app_base_dir }}/releases"
    # Keep only the latest 5 releases
    ls -1t | tail -n +6 | xargs -r rm -rf
    echo "🧹 Cleaned up old releases (keeping latest 5)"
  become: true
  become_user: "{{ apps_user }}"
  ignore_errors: true

- name: "Save deployment metadata for {{ app_name }}"
  copy:
    content: |
      {
        "app_name": "{{ app_name }}",
        "repository": "{{ app_repo }}",
        "branch": "{{ app_branch }}",
        "release": "{{ deploy_timestamp }}",
        "deployed_at": "{{ ansible_date_time.iso8601 }}",
        "deployed_by": "{{ ansible_user_id }}",
        "hostname": "{{ app_hostname }}",
        "port": "{{ app_port }}"
      }
    dest: "{{ release_dir }}/.deploy_metadata.json"
    owner: "{{ apps_user }}"
    group: "{{ apps_group }}"
    mode: "0644"

- name: "Display {{ app_name }} deployment summary"
  debug:
    msg: |
      🎉 {{ app_name }} deployment complete!

      📁 Directory Structure:
      - Base: {{ app_base_dir }}
      - Current: {{ app_base_dir }}/current -> releases/{{ deploy_timestamp }}
      - Shared: {{ app_base_dir }}/shared
      - Backups: {{ app_base_dir }}/backups

      🌐 Access:
      - URL: https://{{ app_hostname }}
      - Port: {{ app_port }}

      📊 Status:
      {{ health_check.stdout }}

      📝 Logs:
      - Build: {{ app_base_dir }}/shared/logs/build_{{ deploy_timestamp }}.log
      - Deploy: {{ app_base_dir }}/shared/logs/deploy_{{ deploy_timestamp }}.log
