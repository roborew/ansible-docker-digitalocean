---
- name: "Set app variables for {{ app.name }}"
  set_fact:
    app_name: "{{ app.name }}"
    app_dir: "{{ apps_base_dir }}/{{ app.name }}"

- name: "Check if {{ app_name }} directory exists"
  stat:
    path: "{{ app_dir }}"
  register: app_dir_stat

- name: "Skip {{ app_name }} if directory doesn't exist"
  debug:
    msg: "‚ö†Ô∏è  {{ app_name }} directory not found at {{ app_dir }}"
  when: not app_dir_stat.stat.exists

- name: "Gather {{ app_name }} diagnostics"
  shell: |
    echo "üîç Diagnostics for {{ app_name }}"
    echo "=================================="
    echo "üìÅ Directory: {{ app_dir }}"
    echo "üìÖ Last modified: $(stat -c %y {{ app_dir }} 2>/dev/null || echo 'Unknown')"
    echo ""

    if [ -f "docker-compose.yml" ] || [ -f "compose.yml" ]; then
      echo "üìã Container Status:"
      {{ compose_command }} ps --format table || echo "‚ùå No containers found"
      echo ""
      
      echo "üñºÔ∏è  Images:"
      {{ compose_command }} images || echo "‚ùå No images found"
      echo ""
      
      echo "üìä Resource Usage:"
      {{ compose_command }} top || echo "‚ùå No running containers"
      echo ""
      
      echo "üåê Networks:"
      docker network ls | grep -E "(proxy|{{ app_name }})" || echo "‚ùå No app networks found"
      echo ""
      
      echo "üì¶ Volumes:"
      docker volume ls | grep "{{ app_name }}" || echo "‚ùå No app volumes found"
      echo ""
      
      if [ -f "/tmp/{{ app_name }}_build.log" ]; then
        echo "üèóÔ∏è  Last Build Log (last 10 lines):"
        tail -10 "/tmp/{{ app_name }}_build.log"
        echo ""
      fi
      
      if [ -f "/tmp/{{ app_name }}_deploy.log" ]; then
        echo "üöÄ Last Deploy Log (last 10 lines):"
        tail -10 "/tmp/{{ app_name }}_deploy.log"
        echo ""
      fi
      
      echo "üìÑ Recent Deployment Logs:"
      ls -la /var/log/ansible-deployments/{{ app_name }}_*.log 2>/dev/null | tail -3 || echo "‚ùå No deployment logs found"
    else
      echo "‚ùå No docker-compose.yml or compose.yml found"
    fi
  args:
    chdir: "{{ app_dir }}"
  become: true
  become_user: "{{ apps_user }}"
  register: diagnostics
  when: app_dir_stat.stat.exists
  changed_when: false

- name: "Display {{ app_name }} diagnostics"
  debug:
    msg: "{{ diagnostics.stdout }}"
  when: app_dir_stat.stat.exists and diagnostics is defined
