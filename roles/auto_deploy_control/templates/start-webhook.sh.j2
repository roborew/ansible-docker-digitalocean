#!/bin/bash

# Start Auto-Deployment Webhook Service
# Runs on control node (Mac Mini, etc.)

set -e

SCRIPT_DIR="{{ auto_deploy_service_dir }}"
PYTHON_ENV="{{ webhook_python_env }}"
WEBHOOK_APP="$SCRIPT_DIR/webhook_control.py"
PID_FILE="$SCRIPT_DIR/webhook.pid"
LOG_DIR="{{ auto_deploy_log_dir }}"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "üéõÔ∏è ${GREEN}Starting Auto-Deployment Webhook Service${NC}"

# Check if already running
if [ -f "$PID_FILE" ]; then
    PID=$(cat "$PID_FILE")
    if kill -0 "$PID" 2>/dev/null; then
        echo -e "${YELLOW}Service is already running (PID: $PID)${NC}"
        exit 0
    else
        echo -e "${YELLOW}Removing stale PID file${NC}"
        rm -f "$PID_FILE"
    fi
fi

# Test configuration first
echo "Testing configuration..."
if ! "$PYTHON_ENV/bin/python" "$WEBHOOK_APP" --test-config; then
    echo -e "${RED}‚ùå Configuration test failed${NC}"
    exit 1
fi

# Create log directory
mkdir -p "$LOG_DIR"

# Start webhook service in background
echo "Starting webhook service..."
nohup "$PYTHON_ENV/bin/python" "$WEBHOOK_APP" > "$LOG_DIR/webhook.out" 2>&1 &
WEBHOOK_PID=$!

# Save PID
echo $WEBHOOK_PID > "$PID_FILE"

# Wait a moment and check if it started successfully
sleep 2
if kill -0 "$WEBHOOK_PID" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Webhook service started successfully${NC}"
    echo "PID: $WEBHOOK_PID"
    echo "Logs: $LOG_DIR/webhook.log"
    echo "Output: $LOG_DIR/webhook.out"
    echo ""
    echo "üì° Webhook endpoint: http://localhost:{{ auto_deploy_webhook_port }}{{ auto_deploy_webhook_path }}"
    echo ""
    echo "Management commands:"
    echo "  $SCRIPT_DIR/stop-webhook.sh    # Stop service"
    echo "  $SCRIPT_DIR/restart-webhook.sh # Restart service"
    echo "  tail -f $LOG_DIR/webhook.log   # View logs"
else
    echo -e "${RED}‚ùå Failed to start webhook service${NC}"
    rm -f "$PID_FILE"
    exit 1
fi 